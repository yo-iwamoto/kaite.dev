generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

enum ArticleStatus {
  OPEN
  CLOSED
}

model ArticleRequest {
  id        String   @id @default(cuid()) @map("id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String @default("") @map("title") @db.VarChar(255)
  description String @default("") @map("description") @db.Text()

  status ArticleStatus @default(OPEN) @map("status")

  ArticleRequestActivit ArticleRequestActivity[]

  @@map("article_requests")
}

enum ArticleRequestActivityType {
  CREATED
  CLOSED
  RE_OPENED
}

model ArticleRequestActivity {
  id        String   @id @default(cuid()) @map("id")
  timestamp DateTime @default(now()) @map("timestamp")

  type ArticleRequestActivityType @map("type")

  articleRequest   ArticleRequest @relation(fields: [articleRequestId], references: [id])
  articleRequestId String         @map("article_request_id")

  @@map("article_request_activities")
}

// ========== start @next-auth/prisma-adapter ==========

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("adapter__accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("adapter__sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("adapter__users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("adapter__verification_tokens")
}

// ========== end @next-auth/prisma-adapter ==========
